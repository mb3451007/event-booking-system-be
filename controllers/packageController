
const packageSchema  = require('../model/packageModel')
const ItemSubitem   = require('../model/itemSubitem')
const Item = require('../model/item');
const { v4: uuidv4 } = require('uuid');


const addPackage = async (req, res) => {
  console.log(req.body, ':Body');
  const { name } = req.body

  if (!name ) {
    return res.status(400).json({ message: "Fill all required fields" });
  }

  try {
    const newItem = new packageSchema({ name });
    await newItem.save();
    return res.status(200).json({message:"package added succsessfully",newItem});
  }
  catch (error) {
    return res.status(500).json({ message: "Error adding package", error });
  }

}



// get Pagnated items
const getPaginatedPackage = async (req, res) => {
  const pageNumber = parseInt(req.params.pageNumber) || 1;
  const pageSize = 10;

  try {
    // Calculate the number of documents to skip
    const skip = (pageNumber - 1) * pageSize;

    // Get the paginated items from the database
    const items = await packageSchema
      .find()
      .skip(skip)
      .limit(pageSize);

    // Get the total number of items in the collection
    const totalItems = await packageSchema.countDocuments();

    // Calculate the total number of pages
    const totalPages = Math.ceil(totalItems / pageSize);

    // Send the paginated items, total pages, and total items count as a response
    res.status(200).json({ message: "Paginated items", items, totalPages, totalItems });
  } catch (error) {
    res.status(500).json({ message: "Error getting paginated items", error });
  }
};




// get All items

const getAllPackage = async (req, res) => {
  try {
    const items = await packageSchema.find()
    res.status(200).json({ message: "All items", items });
  } catch (error) {
    res.status(500).json({ message: "Error getting all items", error });
  }
};



// Delete Items
const deletePackage = async (req, res) => {
  const packageId = req.params.packageId;

  try {
    const deletedItem = await packageSchema.findByIdAndDelete(packageId);

    if (deletedItem) {
      res.status(200).json({ message: "Item deleted successfully", deletedItem });
    } else {
      res.status(404).json({ message: "Item not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error deleting item", error });
  }
};


// Update Items
const updatePackage = async (req, res) => {
  const packageId = req.params.packageId;
  const  name  = req.body;
  console.log(packageId, 'update inputs')
  try {
    const updatedItem = await packageSchema.findByIdAndUpdate(
      packageId,{ name },
      { new: true } 
    );

    if (updatedItem) {
     return res.status(200).json({ message: "Item updated successfully", updatedItem });
    } else {
     return  res.status(404).json({ message: "Item not found" });
    }
  } catch (error) {
    console.log(error)
     return res.status(500).json({ message: "Error updating item", error });
  }
};


// Get Package by Id including associated Item and Subitems
const getPackageById = async (req, res) => {
  const packageId = req.params.packageId;

  try {
    // Fetch the package using the packageId
    const packageData = await packageSchema.findById(packageId);

    if (!packageData) {
      return res.status(404).json({ message: 'Package not found' });
    }

    // Fetch all sub-items related to the package
    const subItems = await ItemSubitem.find({ package_id: packageId });

    // Extract item_id from one of the subItems (assuming they all share the same item_id)
    const itemId = subItems.length > 0 ? subItems[0].item_id : null;

    // Fetch the associated item using the item_id
    let itemData = null;
    if (itemId) {
      itemData = await Item.findById(itemId);
    }

    // Combine package data with its associated item and sub-items
    const packageWithItemAndSubItems = {
      package: packageData,
      item: itemData,
      subItems: subItems
    };

    // Return the combined data
    return res.status(200).json({ message: 'Package retrieved successfully', data: packageWithItemAndSubItems });

  } catch (error) {
    return res.status(500).json({ message: 'Error retrieving package', error });
  }
};

module.exports = { addPackage, getPaginatedPackage, deletePackage, updatePackage, getAllPackage, getPackageById };


