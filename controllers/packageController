
const packageSchema  = require('../model/packageModel')
const ItemSubitem   = require('../model/itemSubitem')
const { v4: uuidv4 } = require('uuid');


const addPackage = async (req, res) => {
  console.log(req.body, ':Body');
  const { name, isAvailable, subItems  } = req.body;

  if (!name || !subItems ) {
    return res.status(400).json({ message: "Fill all required fields" });
  }

  try {
    const newItem = new packageSchema({ name, isAvailable });
    // await newItem.save();
    const savedItem = await newItem.save();

    // Then, create records for each sub-item
    const subItemRecords = subItems.map(subItemId => ({
      item_id: savedItem._id,
      subitem_id: subItemId
    }));

    // Save the sub-item records in the item_subitems collection
    await ItemSubitem.insertMany(subItemRecords);
    return res.status(201).json({ message: "Item added successfully" });
  } catch (error) {
    console.log("Error adding item:", error);
    return res.status(500).json({ message: "Error adding item", error: error.message });
  }
};


// get Pagnated items
const getPaginatedPackage = async (req, res) => {
  const pageNumber = parseInt(req.params.pageNumber) || 1;
  const pageSize = 10;

  try {
    const items = await packageSchema.aggregate([
      {
        $lookup: {
          from: 'itemsubitems',  // The collection name (ensure it's correct in your MongoDB)
          localField: '_id',      // Field from the Item collection
          foreignField: 'item_id', // Field from the ItemSubitem collection
          as: 'subItems'          // Name of the field to add the sub-items array
        }
      },
      {
        $skip: (pageNumber - 1) * pageSize
      },
      {
        $limit: pageSize
      },
      {
        $project: {
          name: 1,
          isAvailable: 1,
          subItems: '$subItems.subitem_id' // Only include the subitem_id field in subItems
        }
      }
    ]);

    const totalItems = await packageSchema.countDocuments();
    const totalPages = Math.ceil(totalItems / pageSize);

    res.status(200).json({ message: "Paginated items", items, totalPages });
  } catch (error) {
    res.status(500).json({ message: "Error getting paginated items", error });
  }
};



// get All items

const getAllPackage = async (req, res) => {
  try {
    const items = await packageSchema.aggregate([
      {
        $lookup: {
          from: 'itemsubitems', // Ensure this matches your MongoDB collection name
          localField: '_id',
          foreignField: 'item_id',
          as: 'subItems'
        }
      },
      {
        $project: {
          name: 1,
          isAvailable: 1,
          subItems: '$subItems.subitem_id' // Correct field syntax
        }
      }
    ]);

    res.status(200).json({ message: "All items", items });
  } catch (error) {
    res.status(500).json({ message: "Error getting all items", error });
  }
};



// Delete Items
const deletePackage = async (req, res) => {
  const packageId = req.params.packageId;

  try {
    const deletedItem = await packageSchema.findByIdAndDelete(packageId);

    if (deletedItem) {
      res.status(200).json({ message: "Item deleted successfully", deletedItem });
    } else {
      res.status(404).json({ message: "Item not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error deleting item", error });
  }
};


// Update Items
const updatePackage = async (req, res) => {
  const packageId = req.params.packageId;
  const { name, isAvailable , subItemIds } = req.body;
  console.log(packageId, isAvailable, subItemIds, 'update inputs')
  try {
    const updatedItem = await packageSchema.findByIdAndUpdate(
      packageId,
      { name, isAvailable , subItemIds },
      { new: true } 
    );

    if (updatedItem) {
     return res.status(200).json({ message: "Item updated successfully", updatedItem });
    } else {
     return  res.status(404).json({ message: "Item not found" });
    }
  } catch (error) {
    console.log(error)
     return res.status(500).json({ message: "Error updating item", error });
  }
};

module.exports = { addPackage, getPaginatedPackage, deletePackage, updatePackage ,getAllPackage};
