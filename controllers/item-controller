
const Item  = require('../model/item')
const ItemSubitem   = require('../model/itemSubitem')
const { v4: uuidv4 } = require('uuid');


const addItem = async (req, res) => {
  console.log(req.body, ':Body');
  const { name, isAvailable, subItems, packages } = req.body;
  console.log(name, isAvailable, subItems, packages, '................add item');

  if (!name || !subItems || !packages || subItems.length === 0 || packages.length === 0) {
    return res.status(400).json({ message: "Fill all required fields" });
  }

  try {
    const newItem = new Item({ name, isAvailable });
    const savedItem = await newItem.save();

    // Create records for each sub-item
    const subItemRecords = subItems.map(subItemId => ({
      item_id: savedItem._id,
      subitem_id: subItemId,
    }));

    // Create records for each package
    const packageRecords = packages.map(packageId => ({
      item_id: savedItem._id,
      package_id: packageId
    }));

    // Save the sub-item and package records
    await ItemSubitem.insertMany([...subItemRecords, ...packageRecords]);

    return res.status(201).json({ message: "Item added successfully" });
  } catch (error) {
    console.log("Error adding item:", error);
    return res.status(500).json({ message: "Error adding item", error: error.message });
  }
};




// get Pagnated items
const getPaginatedItem = async (req, res) => {
  const pageNumber = parseInt(req.params.pageNumber) || 1;
  const pageSize = 10;

  try {
    const items = await Item.aggregate([
      {
        $lookup: {
          from: 'itemsubitems',  // The collection name for sub-items
          localField: '_id',
          foreignField: 'item_id',
          as: 'subItems'
        }
      },
      {
        $lookup: {
          from: 'itemsubitems',  // The collection name for packages
          localField: '_id',
          foreignField: 'item_id',
          as: 'packages'
        }
      },
      {
        $skip: (pageNumber - 1) * pageSize
      },
      {
        $limit: pageSize
      },
      {
        $project: {
          name: 1,
          isAvailable: 1,
          subItems: '$subItems.subitem_id',
          packages: '$packages.package_id'
        }
      }
    ]);

    const totalItems = await Item.countDocuments();
    const totalPages = Math.ceil(totalItems / pageSize);

    res.status(200).json({ message: "Paginated items", items, totalPages });
  } catch (error) {
    res.status(500).json({ message: "Error getting paginated items", error });
  }
};




// get All items

const getAllItems = async (req, res) => {
  try {
    const items = await Item.aggregate([
      {
        $lookup: {
          from: 'itemsubitems', // The collection name for sub-items
          localField: '_id',
          foreignField: 'item_id',
          as: 'subItems'
        }
      },
      {
        $lookup: {
          from: 'itemsubitems', // The collection name for packages
          localField: '_id',
          foreignField: 'item_id',
          as: 'packages'
        }
      },
      {
        $project: {
          name: 1,
          isAvailable: 1,
          subItems: '$subItems.subitem_id',
          packages: '$packages.package_id'
        }
      }
    ]);

    res.status(200).json({ message: "All items", items });
  } catch (error) {
    res.status(500).json({ message: "Error getting all items", error });
  }
};




// Delete Items
const deleteItem = async (req, res) => {
  const itemId = req.params.itemId;

  try {
    const deletedItem = await Item.findByIdAndDelete(itemId);

    if (deletedItem) {
      res.status(200).json({ message: "Item deleted successfully", deletedItem });
    } else {
      res.status(404).json({ message: "Item not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error deleting item", error });
  }
};


// Update Items
const updateitem = async (req, res) => {
  const itemId = req.params.itemId;
  const { name, isAvailable, subItems, packages } = req.body;

  try {
    // Update the item in the Item collection
    const updatedItem = await Item.findByIdAndUpdate(
      itemId,
      { name, isAvailable },
      { new: true }
    );

    if (!updatedItem) {
      return res.status(404).json({ message: "Item not found" });
    }

    // Remove the old subItem and package associations
    await ItemSubitem.deleteMany({ item_id: itemId });

    // Create new subItem and package associations
    const subItemRecords = subItems.map(subItemId => ({
      item_id: itemId,
      subitem_id: subItemId,
    }));

    const packageRecords = packages.map(packageId => ({
      item_id: itemId,
      package_id: packageId,
    }));

    // Save the new associations
    await ItemSubitem.insertMany([...subItemRecords, ...packageRecords]);

    return res.status(200).json({ message: "Item updated successfully", updatedItem });
  } catch (error) {
    console.log("Error updating item:", error);
    return res.status(500).json({ message: "Error updating item", error });
  }
};

module.exports = { addItem, getPaginatedItem, deleteItem, updateitem ,getAllItems};
